-- Create the schema
CREATE SCHEMA IF NOT EXISTS yrkesco;
SET search_path TO yrkesco;

-- Country Table
CREATE TABLE country (
    country_id SERIAL PRIMARY KEY,
    country_name VARCHAR(100) NOT NULL
);

-- City Table
CREATE TABLE city (
    city_id SERIAL PRIMARY KEY,
    city_name VARCHAR(100) NOT NULL,
    country_id INTEGER REFERENCES country(country_id) ON DELETE CASCADE
);

-- Address Table
CREATE TABLE address (
    address_id SERIAL PRIMARY KEY,
    street VARCHAR(100) NOT NULL,
    street_number VARCHAR(20),
    postal_code VARCHAR(20),
    city_id INTEGER REFERENCES city(city_id) ON DELETE CASCADE
);

-- Contract Type Table
CREATE TABLE contract_type (
    contract_type_id SERIAL PRIMARY KEY,
    contract_type_name VARCHAR(100) UNIQUE NOT NULL
);

-- Company Table
CREATE TABLE company (
    company_id SERIAL PRIMARY KEY,
    company_name VARCHAR(100) NOT NULL,
    organization_number VARCHAR(20) UNIQUE CHECK (organization_number IS NULL OR organization_number <> ''),
    F_tax_status BOOLEAN,
    address_id INTEGER REFERENCES address(address_id) ON DELETE SET NULL,
    hourly_rate INTEGER CHECK (hourly_rate >= 0)
);

-- Person Table
CREATE TABLE person (
    person_id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- Personal Information Table
CREATE TABLE personal_information (
    person_id INTEGER PRIMARY KEY REFERENCES person(person_id) ON DELETE CASCADE,
    personal_number VARCHAR(20) UNIQUE NOT NULL
);

-- Class Manager Table
CREATE TABLE class_manager (
    manager_id SERIAL PRIMARY KEY,
    person_id INTEGER REFERENCES person(person_id) ON DELETE CASCADE,
    contract_type_id INTEGER REFERENCES contract_type(contract_type_id) ON DELETE SET NULL,
    company_id INTEGER REFERENCES company(company_id) ON DELETE SET NULL
);

-- Instructor Table
CREATE TABLE instructor (
    instructor_id SERIAL PRIMARY KEY,
    person_id INTEGER REFERENCES person(person_id) ON DELETE CASCADE,
    contract_type_id INTEGER REFERENCES contract_type(contract_type_id) ON DELETE SET NULL,
    company_id INTEGER REFERENCES company(company_id) ON DELETE SET NULL
);

-- School Location Table
CREATE TABLE school_location (
    location_id SERIAL PRIMARY KEY,
    location_name VARCHAR(100) NOT NULL,
    address_id INTEGER REFERENCES address(address_id) ON DELETE CASCADE
);

-- Program Table
CREATE TABLE program (
    program_id SERIAL PRIMARY KEY,
    program_name VARCHAR(100) NOT NULL,
    program_duration_years INTEGER,
    total_credits INTEGER CHECK (total_credits > 0),
    approved_iterations INTEGER
);

-- Course Table
CREATE TABLE course (
    course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,
    course_code VARCHAR(20) UNIQUE,
    course_credits INTEGER NOT NULL CHECK (course_credits > 0),
    course_description TEXT
);

-- Program Course Table
CREATE TABLE program_course (
    program_id INTEGER REFERENCES program(program_id) ON DELETE CASCADE,
    course_id INTEGER REFERENCES course(course_id) ON DELETE CASCADE,
    PRIMARY KEY (program_id, course_id)
);

-- Course Offering Table
CREATE TABLE course_offering (
    offering_id SERIAL PRIMARY KEY,
    course_id INTEGER REFERENCES course(course_id) ON DELETE CASCADE,
    location_id INTEGER REFERENCES school_location(location_id) ON DELETE SET NULL,
    instructor_id INTEGER REFERENCES instructor(instructor_id) ON DELETE SET NULL
);

-- Class Table
CREATE TABLE class (
    class_id SERIAL PRIMARY KEY,
    class_name VARCHAR(20) NOT NULL,
    program_id INTEGER REFERENCES program(program_id) ON DELETE CASCADE,
    iteration_number INTEGER NOT NULL CHECK (iteration_number >= 1),
    manager_id INTEGER REFERENCES class_manager(manager_id) ON DELETE SET NULL
);

-- Student Table
CREATE TABLE student (
    student_id SERIAL PRIMARY KEY,
    person_id INTEGER REFERENCES person(person_id) ON DELETE CASCADE,
    class_id INTEGER REFERENCES class(class_id) ON DELETE SET NULL
);

-- Grade Table
CREATE TABLE grade (
    grade_id SERIAL PRIMARY KEY,
    grade_name VARCHAR(20) UNIQUE NOT NULL
);

-- Enrollment Table
CREATE TABLE enrollment (
    student_id INTEGER REFERENCES student(student_id) ON DELETE CASCADE,
    offering_id INTEGER REFERENCES course_offering(offering_id) ON DELETE CASCADE,
    grade_id INTEGER REFERENCES grade(grade_id) ON DELETE SET NULL,
    PRIMARY KEY (student_id, offering_id)
);
