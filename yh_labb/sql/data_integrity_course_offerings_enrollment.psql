-- Check for Duplicate Entries in program_course
SELECT program_id, course_id, COUNT(*)
FROM yrkesco.program_course
GROUP BY program_id, course_id
HAVING COUNT(*) > 1;

-- Returs: NONE

-- Check for Courses Linked to Multiple Programs
SELECT course_id, COUNT(DISTINCT program_id)
FROM yrkesco.program_course
GROUP BY course_id
HAVING COUNT(DISTINCT program_id) > 1;

-- Returns: NONE

-- Verify How Many Courses a Program Should Have
SELECT 
    program_id,
    COUNT(DISTINCT crs.course_id)
FROM yrkesco.program_course crs
GROUP BY program_id;

-- Return all course names,
-- the programs they belong to, 
-- and the number of offerings for each course

SELECT 
    p.program_id,
    p.program_name,
    c.course_id,
    c.course_name,
    COUNT(co.offering_id) AS total_offerings
FROM yrkesco.program p
JOIN yrkesco.program_course pc ON p.program_id = pc.program_id
JOIN yrkesco.course c ON pc.course_id = c.course_id
LEFT JOIN yrkesco.course_offering co ON c.course_id = co.course_id
GROUP BY p.program_id, p.program_name, c.course_id, c.course_name
ORDER BY p.program_name, c.course_name;

-- extend the previous query to include details on course offerings, associated classes,
--  and the number of students enrolled in each course offering

SELECT 
    p.program_id,
    p.program_name,
    c.course_id,
    c.course_name,
    co.offering_id,
    cls.class_id,
    cls.class_name,
    COUNT(s.student_id) AS enrolled_students
FROM yrkesco.program p
JOIN yrkesco.program_course pc ON p.program_id = pc.program_id
JOIN yrkesco.course c ON pc.course_id = c.course_id
LEFT JOIN yrkesco.course_offering co ON c.course_id = co.course_id
LEFT JOIN yrkesco.class cls ON co.location_id = cls.class_id  -- Assuming course_offering is linked to a class via location
LEFT JOIN yrkesco.student s ON s.class_id = cls.class_id
GROUP BY p.program_id, p.program_name, c.course_id, c.course_name, co.offering_id, cls.class_id, cls.class_name
ORDER BY p.program_name, c.course_name, cls.class_name;
