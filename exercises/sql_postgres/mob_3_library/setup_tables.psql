CREATE SCHEMA library;

-- 1. District (City Districts)
CREATE TABLE IF NOT EXISTS library.District (
    district_id   SERIAL PRIMARY KEY,
    district_name VARCHAR(100) NOT NULL,
    city          VARCHAR(100) NOT NULL
);

-- 2. Address (Used for Libraries & Members)
CREATE TABLE IF NOT EXISTS library.Address (
    address_id    SERIAL PRIMARY KEY,
    street        VARCHAR(255) NOT NULL,
    street_number VARCHAR(20)  NOT NULL,
    district_id   INT NOT NULL,
    FOREIGN KEY (district_id) REFERENCES library.District(district_id)
);

-- 3. Library
CREATE TABLE IF NOT EXISTS library.Library (
    library_id   SERIAL PRIMARY KEY,
    library_name VARCHAR(255) NOT NULL,
    address_id   INT NOT NULL,
    FOREIGN KEY (address_id) REFERENCES library.Address(address_id)
);

-- 4. Member (Library Members)
CREATE TABLE IF NOT EXISTS library.Member (
    member_id   SERIAL PRIMARY KEY,
    member_name VARCHAR(255) NOT NULL,
    email       VARCHAR(255) UNIQUE NOT NULL,
    address_id  INT NOT NULL,
    library_id  INT NOT NULL,  -- Member is tied to a specific library
    FOREIGN KEY (address_id) REFERENCES library.Address(address_id),
    FOREIGN KEY (library_id) REFERENCES library.Library(library_id)
);

-- 5. Personal Info (Optional Extra Table)
CREATE TABLE IF NOT EXISTS library.Personal_info (
    personal_number VARCHAR(20) PRIMARY KEY, 
    member_id       INT UNIQUE NOT NULL,
    FOREIGN KEY (member_id) REFERENCES library.Member(member_id)
);

-- 6. Book 
CREATE TABLE IF NOT EXISTS library.Book (
    book_id      SERIAL PRIMARY KEY,
    book_title   VARCHAR(255) NOT NULL,
    loan_duration INT NOT NULL,  -- Defines how many days a book can be borrowed
    ISBN         VARCHAR(20) UNIQUE NOT NULL
);

-- 7. Author
CREATE TABLE IF NOT EXISTS library.Author (
    author_id   SERIAL PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL
);

-- 8. BookAuthor (Many-to-Many: Books & Authors)
CREATE TABLE IF NOT EXISTS library.BookAuthor (
    author_id INT NOT NULL,
    book_id   INT NOT NULL,
    PRIMARY KEY (author_id, book_id),
    FOREIGN KEY (author_id) REFERENCES library.Author(author_id),
    FOREIGN KEY (book_id) REFERENCES library.Book(book_id)
);

-- 9. Category
CREATE TABLE IF NOT EXISTS library.Category (
    category_id   SERIAL PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL
);

-- 10. BookCategory (Many-to-Many: Books & Categories)
CREATE TABLE IF NOT EXISTS library.BookCategory (
    book_id     INT NOT NULL,
    category_id INT NOT NULL,
    PRIMARY KEY (book_id, category_id),
    FOREIGN KEY (book_id) REFERENCES library.Book(book_id),
    FOREIGN KEY (category_id) REFERENCES library.Category(category_id)
);

-- 11. Inventory (Each Book Copy in a Library)
CREATE TABLE IF NOT EXISTS library.Inventory (
    inventory_id SERIAL PRIMARY KEY,  -- Unique ID for each book copy
    book_id      INT NOT NULL,
    library_id   INT NOT NULL,  -- This book copy belongs to ONE library
    FOREIGN KEY (book_id) REFERENCES library.Book(book_id),
    FOREIGN KEY (library_id) REFERENCES library.Library(library_id)
);

-- 12. Borrowing (Tracks Which Book Copy is Borrowed)
CREATE TABLE IF NOT EXISTS library.Borrowing (
    borrowing_id  SERIAL PRIMARY KEY,
    member_id     INT NOT NULL,
    inventory_id  INT NOT NULL,  -- Tracks the specific book copy
    borrow_date   DATE NOT NULL,
    return_date   DATE,  -- Can be NULL if the book is not yet returned
    FOREIGN KEY (member_id) REFERENCES library.Member(member_id),
    FOREIGN KEY (inventory_id) REFERENCES library.Inventory(inventory_id)
);
